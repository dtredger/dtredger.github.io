<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/dtredger.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/dtredger.github.io/" rel="alternate" type="text/html" /><updated>2021-04-01T23:57:04-04:00</updated><id>http://localhost:4000/dtredger.github.io/feed.xml</id><title type="html">Dylan Tredger</title><subtitle> </subtitle><entry><title type="html">Antipodes</title><link href="http://localhost:4000/dtredger.github.io/blog/2014/antipodes/" rel="alternate" type="text/html" title="Antipodes" /><published>2014-11-30T00:00:00-05:00</published><updated>2014-11-30T00:00:00-05:00</updated><id>http://localhost:4000/dtredger.github.io/blog/2014/antipodes</id><content type="html" xml:base="http://localhost:4000/dtredger.github.io/blog/2014/antipodes/">&lt;p&gt;&lt;em&gt;Find the city furthest from you.&lt;/em&gt; [&lt;a href=&quot;https://github.com/dtredger/antipodes&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Antipodes is an angular-based site that finds your antipode, and the closest city to there; ie: &lt;em&gt;the city 
farthest from you.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The site takes your latitude/longitude from browser geolocation, then calculates the geographic antipode, and centers a mapbox map on that location.&lt;/p&gt;

&lt;h2 id=&quot;technologiesservices-used&quot;&gt;Technologies/Services Used:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Angular 1&lt;/li&gt;
  &lt;li&gt;Webworkers&lt;/li&gt;
  &lt;li&gt;Papaparse.js&lt;/li&gt;
  &lt;li&gt;Mapbox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From that point, the site can find the closest city by comparing your anti-coordinates to a 90mb csv. The csv is a list of cities and their latitude/longitude, and I use the papaparse.js library to churn through them, saving the closest one. Webworkers read the csv so the browser tab remains interactive. An angular directive shows a progress bar of parsing status (updated every 5% complete).&lt;/p&gt;

&lt;p&gt;Since everything happens client-side, there is no need for a server. The one catch with this solution is that every find requires downloading the entire coordinates file. Given transfer fees for file hosting, it’s probably cheaper to do this on a server (v_v;)&lt;/p&gt;

&lt;h2 id=&quot;issues&quot;&gt;Issues:&lt;/h2&gt;
&lt;p&gt;Currently, calculation of the closest city is inaccurate, since it assumes lines of latitude are the same distance 
apart as lines of longitude (not true), and assumes that lines of longitude are always the same distance apart (also not true). The solution is to calculate the &lt;strong&gt;Haversine Distance&lt;/strong&gt; between points (this is implemented in &lt;a href=&quot;/dtredger.github.io/projects/tba-kite-site&quot; target=&quot;_blank&quot;&gt;TBA Kite Site&lt;/a&gt;)&lt;/p&gt;</content><author><name></name></author><summary type="html">Find the city furthest from you. [github]</summary></entry><entry><title type="html">piDashboard</title><link href="http://localhost:4000/dtredger.github.io/blog/2014/pi-dashboard/" rel="alternate" type="text/html" title="piDashboard" /><published>2014-11-21T00:00:00-05:00</published><updated>2014-11-21T00:00:00-05:00</updated><id>http://localhost:4000/dtredger.github.io/blog/2014/pi-dashboard</id><content type="html" xml:base="http://localhost:4000/dtredger.github.io/blog/2014/pi-dashboard/">&lt;p&gt;&lt;em&gt;Angular dashboard for sensor data.&lt;/em&gt; [&lt;a href=&quot;https://github.com/dtredger/pidashboard&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;piDashboard is based on rDash Dashboard . The site is an angular-based dashboard for data provided by a Raspberry Pi. 
(see &lt;a href=&quot;{ {'/projects/raspberry-pi' | prepend: site.baseurl}}&quot; target=&quot;_blank&quot;&gt;RaspberryPi&lt;/a&gt; for code for running 
sensors).&lt;/p&gt;

&lt;p&gt;Currently the site has two functions-ish:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Display a carousel of timelapse images captured by a raspberry pi.&lt;/li&gt;
  &lt;li&gt;Show a graph of temp/humidity recorded by a raspberry pi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A crude live version of the site was being served by nginx running on a raspberry pi (the same pi as provides the data), but this was too much of a drain on resources (in the event someone visited).&lt;/p&gt;

&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;A Carousel isn’t a good way to show timelapse images (many of which are pitch-dark…), but the raspberry pi is too constrained to do video-processing&lt;/li&gt;
  &lt;li&gt;The humidity graph shows all data-points (it has no ability to date-filter for recency).&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Angular dashboard for sensor data. [github]</summary></entry><entry><title type="html">WeatherTF</title><link href="http://localhost:4000/dtredger.github.io/blog/2014/weathertf/" rel="alternate" type="text/html" title="WeatherTF" /><published>2014-06-10T00:00:00-04:00</published><updated>2014-06-10T00:00:00-04:00</updated><id>http://localhost:4000/dtredger.github.io/blog/2014/weathertf</id><content type="html" xml:base="http://localhost:4000/dtredger.github.io/blog/2014/weathertf/">&lt;p&gt;&lt;em&gt;Rails app to warn you of rain.&lt;/em&gt; [&lt;a href=&quot;https://github.com/dtredger/weathertf&quot;&gt;github&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;WeatherTF is a simple rails app that sends you an SMS message with the forecast for your latitude/longitude every 
morning . Lat/Lon is determined by browser geolocation (if available).&lt;/p&gt;

&lt;p&gt;Messages are actually just emails, which are sent to your carrier’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SMS gateway&lt;/code&gt;, which will deliver a plain-text 
email as a message. Messages are sent at 8am (EST) every morning via resque-scheduler. Normal emails are sent using resque.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Forecasts are via the Forecast.io. API.&lt;/li&gt;
  &lt;li&gt;Background images are from Ansel Adams’ &lt;em&gt;“National Parks”&lt;/em&gt; series).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app not currently deployed anywhere&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Rails app to warn you of rain. [github]</summary></entry><entry><title type="html">Generative Music</title><link href="http://localhost:4000/dtredger.github.io/blog/2014/generative-music/" rel="alternate" type="text/html" title="Generative Music" /><published>2014-03-23T00:00:00-04:00</published><updated>2014-03-23T00:00:00-04:00</updated><id>http://localhost:4000/dtredger.github.io/blog/2014/generative-music</id><content type="html" xml:base="http://localhost:4000/dtredger.github.io/blog/2014/generative-music/">&lt;p&gt;&lt;em&gt;Generate MIDIs from data.&lt;/em&gt; [&lt;a href=&quot;https://github.com/dtredger/generative-music&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;This repo takes data and transforms it into midi files (uses midiutil library). MIDI files are then transformed into 
&lt;strong&gt;&lt;em&gt;.wav&lt;/em&gt;&lt;/strong&gt; audio with fluidsynth and a soundfont.&lt;/p&gt;

&lt;p&gt;Currently the transformation of the input data is a basic linear transformation. In my case, the data is from temp 
and humidity sensors running on a Raspberry pi. The &lt;a href=&quot;/dtredger.github.io/projects/raspberry-pi &quot;&gt;RaspberryPi&lt;/a&gt; repo shows an example of source data.&lt;/p&gt;

&lt;p&gt;That same &lt;a href=&quot;/dtredger.github.io/projects/raspberry-pi&quot;&gt;repo&lt;/a&gt; also has code to&lt;br /&gt;
create a hyperlocal FM radio station that can broadcast media files.&lt;/p&gt;

&lt;h2 id=&quot;playing-sounds&quot;&gt;Playing Sounds:&lt;/h2&gt;

&lt;p&gt;To play the music, you will need:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The ability to play MIDI files (it appears Mac OS can no longer play MIDI files by default. You’ll need 
&lt;strong&gt;&lt;em&gt;FluidSynth&lt;/em&gt;&lt;/strong&gt; (you can brew install fluid-synth.&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;&lt;em&gt;Sound Font&lt;/em&gt;&lt;/strong&gt; to actually play the MIDI file (you can chose which instrument). I’ve included an open-source 
piano 
in the repo: there are tons of instrument options out there.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Generate MIDIs from data. [github]</summary></entry></feed>